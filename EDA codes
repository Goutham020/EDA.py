# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder

# Set style for visualizations
sns.set_style('whitegrid')
plt.rcParams['figure.figsize'] = (12, 6)

# Load the datasets
train_df = pd.read_csv("C:/Users/Admin/Downloads/archive (1)/train_genetic_disorders.csv")
test_df = pd.read_csv("C:/Users/Admin/Downloads/archive (1)/test_genetic_disorders.csv")

# Display basic information about the datasets
print("=== Train Dataset Info ===")
print(train_df.info())
print("\n=== Test Dataset Info ===")
print(test_df.info())

# Display first few rows of the train dataset
print("\n=== Train Dataset Sample ===")
print(train_df.head())

# Check for missing values
print("\n=== Missing Values in Train Dataset ===")
print(train_df.isnull().sum().sort_values(ascending=False))

# Basic statistics for numerical features
print("\n=== Descriptive Statistics ===")
print(train_df.describe())

# Data Preprocessing
# For EDA purposes, we'll handle missing values and encode categorical variables

# Fill missing values with mode for categorical and median for numerical
for col in train_df.columns:
    if train_df[col].dtype == 'object':
        train_df[col].fillna(train_df[col].mode()[0], inplace=True)
    else:
        train_df[col].fillna(train_df[col].median(), inplace=True)

# Encode categorical variables for correlation analysis
label_encoders = {}
for col in train_df.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    train_df[col] = le.fit_transform(train_df[col].astype(str))
    label_encoders[col] = le

# 1. Histograms for numerical features
print("\nPlotting histograms for numerical features...")
numerical_cols = train_df.select_dtypes(include=['int64', 'float64']).columns
train_df[numerical_cols].hist(bins=20, figsize=(20, 15))
plt.suptitle('Histograms of Numerical Features', y=1.02)
plt.tight_layout()
plt.savefig('numerical_histograms.png')
plt.show()

# 2. Boxplots for numerical features
print("\nPlotting boxplots for numerical features...")
plt.figure(figsize=(20, 10))
sns.boxplot(data=train_df[numerical_cols])
plt.title('Boxplots of Numerical Features')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('numerical_boxplots.png')
plt.show()

# 3. Correlation matrix and heatmap
print("\nCalculating correlation matrix...")
corr_matrix = train_df.corr()

plt.figure(figsize=(20, 15))
sns.heatmap(corr_matrix, annot=True, fmt=".2f", cmap='coolwarm', 
            annot_kws={'size': 8}, vmin=-1, vmax=1)
plt.title('Feature Correlation Matrix')
plt.tight_layout()
plt.savefig('correlation_matrix.png')
plt.show()

# 4. Pairplot for a subset of features (sampling for performance)
print("\nCreating pairplot for a subset of features...")
sample_df = train_df.sample(frac=0.1, random_state=42)  # Sample 10% for performance
sns.pairplot(sample_df[numerical_cols[:5]])  # First 5 numerical features
plt.suptitle('Pairplot of Numerical Features', y=1.02)
plt.savefig('pairplot.png')
plt.show()

# 5. Count plots for important categorical features
print("\nPlotting count plots for categorical features...")
# Decode a few important categorical features back to original values for visualization
categorical_cols = ['Patient Age', 'Genes in mother\'s side', 'Inherited from father', 
                    'Maternal gene', 'Status']

for col in categorical_cols:
    if col in label_encoders:
        # Get original values back for visualization
        train_df[col] = label_encoders[col].inverse_transform(train_df[col])
        
        plt.figure(figsize=(10, 6))
        sns.countplot(data=train_df, x=col)
        plt.title(f'Distribution of {col}')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig(f'{col}_countplot.png')
        plt.show()

# 6. Target variable analysis (assuming 'Status' is the target)
if 'Status' in train_df.columns:
    print("\nAnalyzing target variable...")
    plt.figure(figsize=(10, 6))
    sns.countplot(data=train_df, x='Status')
    plt.title('Distribution of Target Variable (Status)')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('target_distribution.png')
    plt.show()

# 7. Outlier detection using boxplots for key numerical features
key_numerical = ['Patient Age', 'Blood cell count (mcL)', 'White Blood cell count (thousand per microliter)']
if all(col in train_df.columns for col in key_numerical):
    print("\nDetecting outliers in key numerical features...")
    for col in key_numerical:
        plt.figure(figsize=(8, 6))
        sns.boxplot(data=train_df, y=col)
        plt.title(f'Boxplot of {col} for Outlier Detection')
        plt.tight_layout()
        plt.savefig(f'{col}_outliers.png')
        plt.show()

# 8. Feature distributions by target (Status)
if 'Status' in train_df.columns:
    print("\nAnalyzing feature distributions by target variable...")
    for col in key_numerical:
        plt.figure(figsize=(10, 6))
        sns.boxplot(data=train_df, x='Status', y=col)
        plt.title(f'Distribution of {col} by Status')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig(f'{col}_by_status.png')
        plt.show()

print("\n=== EDA Complete ===")

